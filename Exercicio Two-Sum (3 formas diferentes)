# É necessário resolver a questão de 3 formas diferentes: 

#  1) Força Bruta, varrendo o vetor nums até encontrar o resultado.

def two_sum_brute_force(nums, target):
    for i in range(len(nums)):
        for j in range(i + 1, len(nums)):
            if nums[i] + nums[j] == target:
                return [i, j]

# 2) Solução com QuickSort + Dois Ponteiros

def quicksort(arr):
    if len(arr) <= 1:
        return arr
    else:
        pivot = arr[0]
        menores = [x for x in arr[1:] if x <= pivot]
        maiores = [x for x in arr[1:] if x > pivot]
        return quicksort(menores) + [pivot] + quicksort(maiores)

def two_sum_sorted(nums, target):
    # Guardar os índices originais
    nums_com_indices = list(enumerate(nums))
    # Ordenar pelo valor
    nums_com_indices.sort(key=lambda x: x[1])

    esquerda = 0
    direita = len(nums) - 1

    while esquerda < direita:
        soma = nums_com_indices[esquerda][1] + nums_com_indices[direita][1]
        if soma == target:
            return [nums_com_indices[esquerda][0], nums_com_indices[direita][0]]
        elif soma < target:
            esquerda += 1
        else:
            direita -= 1

# 3) Solução com Hash

def two_sum_hash(numeros, alvo):
    indice_por_valor = {}  # valor: índice

    for i, valor_atual in enumerate(numeros):
        complemento = alvo - valor_atual
        if complemento in indice_por_valor:
            return [indice_por_valor[complemento], i]
        indice_por_valor[valor_atual] = i

